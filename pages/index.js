import Head from 'next/head'
import { useEffect, useState } from 'react'
import {db} from '../utils/firebase'
import {collection,addDoc ,  query, onSnapshot} from 'firebase/firestore'
import {onAuthStateChanged} from 'firebase/auth'
import {auth} from '../utils/firebase'
import TodosList from '@/components/TodosList'
import Login from '@/components/LoginWith'
import {useAuthState} from 'react-firebase-hooks/auth'


export default function Home() {

  const [todo, setTodo] = useState("")
  const [todoList, setTodoList] = useState([])
  const todoRef = collection(db,'todo')
  const [user] = useAuthState(auth)

  onAuthStateChanged(auth, (user) => {
    if (user) {
      // User is signed in, see docs for a list of available properties
      // https://firebase.google.com/docs/reference/js/firebase.User
      const uid = user.uid;
      console.log(user)
      // ...
    } else {
      // User is signed out
      // ...
    }
  });
  

  const createATodo =async () => {
      await addDoc(todoRef,{
        todo: todo,
        isCompleted: false,
        userId:user.uid,
      })
      setTodo('')
        }
  
        

useEffect(()=>{
const q  = query(collection(db,'todo'))
const unsubscribe = onSnapshot(q,(querySnapshot)=>{
  let todoArr = []
  querySnapshot.forEach((doc)=>{
    todoArr.push({...doc.data(),id:doc.id})
  })
  setTodoList(todoArr)
}
)
return () => unsubscribe()
},[])

  return (

  <> {!user ? <Login /> : 
  (
    <>
          <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="w-full h-screen bg-gray-100 pt-8">
    <div className="bg-white p-3 max-w-md mx-auto">
        <div className="text-center">
            <h1 className="text-3xl font-bold">ToDo App</h1>
            <div className="mt-4 flex">
                <input
                value={todo}
                onChange={e=>setTodo(e.target.value)}
                    className="w-80 border-b-2 border-gray-500 text-black"
                    type="text" placeholder="Enter your task here" 
                />
                <button onClick={createATodo}
                    className="ml-2 border-2 border-green-500 p-2 text-green-500 hover:text-white hover:bg-green-500 rounded-lg flex"
                >   
                    <svg className="h-6 w-6"  width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">  <path stroke="none" d="M0 0h24v24H0z"/>  <circle cx="12" cy="12" r="9" />  <line x1="9" y1="12" x2="15" y2="12" />  <line x1="12" y1="9" x2="12" y2="15" /></svg>
                    <span>Add</span>
                </button>
            </div>        
        </div>
        {todoList.map((list)=>(
          <div key={list.id}>
<TodosList todo={list.todo} id={list.id} userId={list.userId} isCompleted={list.isCompleted}/>
          </div>
        ))}
       
    </div>
</div>
    </>
  )}

    </>
  )
}
